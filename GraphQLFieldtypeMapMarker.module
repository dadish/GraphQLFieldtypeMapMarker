<?php namespace ProcessWire;

use GraphQL\Type\Definition\Type;
use GraphQL\Type\Definition\ObjectType;
use GraphQL\Type\Definition\InputObjectType;
use ProcessWire\Page;
use ProcessWire\Field;

class GraphQLFieldtypeMapMarker extends WireData implements Module {

  /**
   * getModuleInfo is a module required by all modules to tell ProcessWire about them
   *
   * @return array
   *
   */
  public static function getModuleInfo() {

    return array(

      // The module's title, typically a little more descriptive than the class name
      'title' => 'GraphQLFieldtypeMapMarker', 

      // version number 
      'version' => '2.0.0',

      // summary is brief description of what this module is
      'summary' => 'GraphQL support for FieldtypeMapMarker.',
      
      // Optional URL to more information about the module
      'href' => 'https://github.com/dadish/GraphQLFieldtypeMapMarker',
    
      // Optional font-awesome icon name, minus the 'fa-' part
      'icon' => 'map',

      'requires' => ['ProcessGraphQL']
      );
  }

  public static function getType(Field $field)
  {
    return new ObjectType([
      'name' => 'MapMarker',
      'fields' => [
        'lat' => [
          'type' => Type::float(),
          'description' => 'The latitude of the MapMarker.',
          'resolve' => function ($value) {
            return (float) $value->lat;
          }
        ],

        'lng' => [
          'type' => Type::float(),
          'description' => 'The longitude of the MapMarker.',
          'resolve' => function ($value) {
            return (float) $value->lng;
          }
        ],

        'address' => [
          'type' => Type::string(),
          'description' => 'The address of the MapMarker.',
          'resolve' => function ($value) {
            return (string) $value->address;
          }
        ],

        'zoom' => [
          'type' => Type::int(),
          'description' => 'The zoom of the MapMarker.',
          'resolve' => function ($value) {
            return (integer) $value->zoom;
          }
        ],
      ],
    ]);
  }

  public static function getInputType(Field $field)
  {
    return new InputObjectType([
      'name' => 'MapMarkerInput',
      'fields' => [
        'lat' => Type::float(),
        'lng' => Type::float(),
        'address' => Type::string(),
        'zoom' => Type::int(),
      ],
    ]);
  }

  public static function setValue(Page $page, Field $field, $value)
  {
    $fieldName = $field->name;
    $page->$fieldName->skipGeocode = true;
    $page->$fieldName->lat = $value['lat'];
    $page->$fieldName->lng = $value['lng'];
    $page->$fieldName->address = $value['address'];
    $page->$fieldName->zoom = $value['zoom'];    
  }
}